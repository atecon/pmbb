function bundle pmbb (const series y,
                      const list X,
                      int blocksize[1:50:4],
                      int nboot[100:50000:1000],
                      int pseed[0::0])
    /* Main function. */

    if pseed
        set seed pseed
    endif

    bundle self = _(blocksize, nboot)
    scalar self.N = max($unit)
    scalar self.T = $pd
    scalar nblocks = ceil(self.T / self.blocksize)
    matrix yX = {y} ~ {X}
    matrix self.confidence_levels = {0.99, 0.95, 0.90}

    panel y 0 X --quiet

    scalar self.nT = $T
    matrix self.coeff = $coeff[2:]      # disregard "const"
    self.parnames = $model.parnames[2:]
    rnameset(self.coeff, self.parnames)
    scalar ncoeff = $ncoeff
    scalar ncoeff_wo_const = ncoeff - 1

    scalar r = rows(yX) / self.T * cols(yX)
    scalar r = self.N * ncoeff
    matrix minit = seq(1, r, ncoeff)
    matrix MW = zeros(self.T, r)
    matrix self.coeffs = zeros(self.nboot, ncoeff_wo_const)
    matrix self.tstats = zeros(self.nboot, ncoeff_wo_const)

    # From long to wide format
    loop i=1..self.N
        scalar last = minit[i] + ncoeff - 1
        scalar init_yX = 1+(i-1)*self.T
        MW[,minit[i]:last] = yX[init_yX:i*self.T,]
    endloop

    loop q=1..self.nboot
        matrix MB = zeros(self.nT, ncoeff)
        matrix randblock = round((self.T - self.blocksize) * \
                             muniform(nblocks, 1))
        matrix minit = seq(1, self.nT+1, self.T)
        matrix MBW = {}
        matrix uhat = {}
        matrix S1 = {}

        # TODO: Initializing the right dimension of MBW may save time
        # Resampling
        loop i=1..nblocks
            scalar tmp = randblock[i]
            MBW = MBW | MW[tmp+1:tmp+self.blocksize,]
        endloop

        MBW = MBW[1:self.T,]
        MBW = MBW .- meanc(MBW)

        loop i=1..self.N
            scalar endrow = minit[i] + self.T - 1
            scalar initcol = 1 + (i-1) * ncoeff
            scalar endcol = i * ncoeff
            MB[minit[i]:endrow,] = MBW[,initcol:endcol]
        endloop

        matrix my = MB[,1]
        matrix mx = MB[,-1]

        catch bhat = mols(my, mx, &uhat)

        if $error
            # in case of an error, rely on the initial point estimate
            self.coeffs[q,] = self.coeff'
            matrix uhat =  MB[,1] - sumr(MB[,2:ncoeff] .* self.coeff')
        else
            self.coeffs[q,] = transp(bhat)
        endif

        # Scores
        matrix S = MB[,2:ncoeff] .* uhat

        loop o=1..ncoeff_wo_const
            matrix s = sumr(mshape(S[,o], self.T, self.N)) / self.N
            matrix s1 = zeros(nblocks, 1)

            loop m=1..self.T
                scalar j = int((m-0.5) / self.blocksize) + 1
                s1[j] += s[m]
            endloop

            S1 ~= s1 / sqrt(self.blocksize)
        endloop

        B1 = (S1'S1) / nblocks
        matrix A1 = self.nT * invpd(MB[,2:ncoeff]' MB[,2:ncoeff])
        matrix mat = qform(A1, B1)
        matrix C = transp(sqrt(diag(mat)))

        # Absolute value of the Studentized bootstrap statistic
        self.tstats[q,] = abs(sqrt(self.T) * \
                             ( (self.coeffs[q,] - self.coeff') ./ C) )
    endloop

    matrix self.stderr  = sqrt(self.T) * sdc(self.coeffs)'
    rnameset(self.stderr, self.parnames)

    confidence_intervals(&self, self.confidence_levels)

    print_header (self, nblocks)
    print_results(self)

    return self
end function


function void confidence_intervals (bundle *self,
                                    const matrix confidence_levels)
    /* Compute confidence intervals of coefficients. Add matrices to self.
        Each matrix has the same number of rows as `coeff`, and 2 columns: the lower bound and the upper bound, respectively. The name of the matrices have the format "qXX", where "XX" is the confidence level multiplied by 100 (e.g., "q95" for a 95% confidence level).

    Args:
        self (bundle): Bundle (in pointer form) holding various objects.
        confidence_levels (matrix): Vector of confidence levels (in the range [0,1]) for which to compute intervals.

    Note:
        The intervals are computed using the formula point_estimate +- t_stat * stddev, where t_stat is the (1-confidence_level/2)-quantile of the bootstrap t-statistics.
    */

    loop i=1..nelem(confidence_levels)
        matrix q = quantile(self.tstats, confidence_levels[i])'
        matrix lower = self.coeff - q .* self.stderr
        matrix upper = self.coeff + q .* self.stderr

        string vname = intval_matrix_name(confidence_levels[i])
        matrix self.@vname =  lower ~ upper
        cnameset(self.@vname, defarray("Lower", "Upper"))
        rnameset(self.@vname, self.parnames)
    endloop
end function


function string intval_matrix_name (const scalar cilevel)
    /* Construct a string for a confidence interval level.

    Args:
        cilevel (scalar): the confidence interval level, a number between 0 and 1.

    Returns:
        A string of the form "qXX", where "XX" is the integer representation of 100 times the confidence interval level. This string can be used as a key to store and retrieve the corresponding confidence intervals in a bundle.
*/
    return sprintf("q%d", 100*cilevel)
end function


function void print_header (const bundle self,
                            const scalar nblocks)
    printf "\nPanel Moving Blocks Bootstrap (MBB) for linear regression models with fixed effects\n"
    printf "Bootstrap standard errors and symmetric bootstrap percentile-t confidence intervals\n"
    printf "\n  No. of bootstrap replications: %d\n", self.nboot
    printf "  Average block size: %g\n", (self.T / nblocks)
end function


function void print_results (const bundle self)
    /* Print coefficient estimates and confidence intervals. */

    matrix mat = merge_coeff_stderr(self.coeff, self.stderr)
    printf "\nPoint estimates and bootstrap standard errors:\n"
    printf "\n%16.5f\n", mat

    matrix mat = merge_intervals(self)
    print "Bootstrap confidence intervals for different confidence levels:"
    printf "\n%16.5f\n", mat
end function


function strings append_suffix (const strings str, const string suffix)
    /* Append a suffix to each string in an array of strings.

    Args:
        str (strings): an array of strings.
        suffix (string): the suffix to append to each string in the array.

    Returns:
        An array of strings where each string has the suffix appended at the end.
*/
    strings ret = array(nelem(str))

    loop foreach i str
        ret[i] = sprintf("%s%s", str[i], suffix)
    endloop

    return ret
end function

function matrix merge_intervals (const bundle self)
    /* Merge horizontally confidence intervals for different levels.

    Args:
        self (bundle): a bundle containing matrices of confidence intervals for different levels. The keys of the matrices must have the format "qXX", where "XX" is the confidence level multiplied by 100.

    Returns:
        A matrix where the columns correspond to the different confidence interval levels and the rows correspond to the same coefficients for each level of confidence. The column labels are constructed by concatenating the original column names with the suffix "(qXX)", where "XX" is the integer representation of the corresponding confidence level multiplied by 100. */

    matrix ci = {}
    strings clabels = array(0)

    loop i=1..nelem(self.confidence_levels)
        string vname = intval_matrix_name(self.confidence_levels[i])
        ci ~= self.@vname

        clabels += append_suffix(cnameget(self.@vname),
                                 sprintf("(q%d)",
                                         100*self.confidence_levels[i]))
    endloop
    cnameset(ci, clabels)

    return ci
end function


function matrix merge_coeff_stderr (const matrix coeff, const matrix stderr)
    matrix cs = coeff ~ stderr
    cnameset(cs, defarray("coefficient", "std. error"))

    return cs
end function
