The function implements the panel Moving Blocks Bootstrap (MBB) suggested and
analyzed by Gon√ßalves, S. (2011, The moving blocks bootstrap for panel linear
regression models with individual fixed effects, Econometric Theory, forthcoming).

The panel MBB is different from the standard MBB of Kunsch (1989) and Liu and
Singh (1992), because what is drawn in the resampling is the vector containing the
n individual observations at each point in time.
The panel MBB is robust to serial correlation (like the standard MBB), but also to
arbitrary forms of cross sectional dependence.

The simulations carried out in the paper show that the panel MBB performs well
even when the degree of serial and cross sectional correlation is large, provided
that the block size is appropriately chosen.
In the simulations, Goncalves adopts a data-driven approach, with a block size
equal on average to:
- 4.4 when T = 25;
- 7.9 when T = 50;
- 12.2 when T = 100.

Please report bugs or comments on github (https://github.com/atecon/pmbb) or write to giuseppe.vittucci@gmail.com.


Public function
===============

===========================================
pmbb(const series y, const string method)
===========================================
The function computes and shows also the symmetric bootstrap percentile-t
confidence intervals of the coefficients at the 1%, 5% and 10% significance level.
The bootstrap percentile-t confidence intervals are calculated as: beta_hat +/-
q_alpha*se_beta
where:
- beta_hat is the FE estimate of the coefficient;
- se_beta is the sqrt of the bootstrap variance estimator based on B bootstrap
replications;
- q_alpha is the alpha*100 percentile of the absolute value of the Studentized
bootstrap statistic.
The bootstrap t-statistic is Studentized using the multivariate analog of the
Gotze and Kunsch (1996) variance estimator, adapted to panel models by Goncalves
(2011).

Please note that the function works only with perfectly balanced panels (no
missing observation).


Parameters:
-----------
- the series of the dependent variable;
- the list of regressors (without the constant which is added by default);
- the block size (default size: 3);
- number of replications (default number: 1000);
- seed of the pseudo-random number generator (default 0 = auto).

Returns:
--------
The function returns a bundle with:
- a matrix (beta) containing the vectors of coefficients in each of the bootstrap
replications;
- a matrix (tstat) containing the vectors of Studentized bootstrap statistic in
each replication.


================================================
impute_by_sts(const series y, bundle opts[null])
================================================
Impute missing values of 'y' by means of a structural time-series model (using
the 'StrucTiSM' package). For details see the manual of the 'StrucTiSM'
package. Works only on time-series dataset.

Parameters:
-----------
y       -- series, target on which to impute missing values
opts    -- bundle, Optional key-value pairs can be passed to determine the
           type of components which are passed to the STSM_setup() function:
             "seasonal" (default 2 = stochastic with dummies)
               Other value(s): 0 = none, 1 = stochastic with trigonometric
                 terms, 3 = deterministic dummies
             "slope" (default: 1 = stochastic)
               Other value(s): 0 = none, 2 = deterministic
             "trend" (default: 1 = stochastic)
               Other value(s): 2 = deterministic
             "irregular" (default: 1(=TRUE) = with irregular component)
               Other value(s): 0(=FALSE) = without irregular component

Returns:
--------
Original series 'y' but with replaced missing values.


========================
backfill(const series y)
========================
Use next valid observation to fill gap. The function does not work for panel
data.
It works as Pandas' fillna() "bfill" method
(https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html)

Parameters:
-----------
y       -- series, target series

Returns:
--------
Series with imputed values. If no valid values exists for a unit, NA is
returned.  By definition, if the first observation is missing, this cannot be
imputed by this strategy.


=====================
first(const series y)
=====================
Compute first valid value for cross-sectional and time-series datasets,
respectively. In case of a panel dataset, the first valid value of each panel
unit is obtained instead (equivalent to the pfirst() function of the
"PanelTools" package).

Parameters:
-----------
y       -- series, target series

Returns:
--------
Series with the first valid value of "y" (for each cross-sectional in case of
a panel dataset). If no valid values exists for a unit, NA is returned.


=========================
frontfill(const series y)
=========================
Propagate last valid observation forward to next valid value. The function does
not work for panel data. It works as Pandas' fillna() "ffill" method
(https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html)

Parameters:
-----------
y       -- series, target series

Returns:
--------
Series with imputed values. If no valid values exists for a unit, NA is
returned. By definition, if the last observation is missing, this cannot be
imputed by this strategy.


====================
last(const series y)
====================
Compute last valid value for cross-sectional and time-series datasets,
respectively. In case of a panel dataset, the last valid value of each panel
unit is obtained instead (equivalent to the plast() function of the
"PanelTools" package).

Parameters:
-----------
y       -- series, target series

Returns:
--------
Series with the last valid value of "y" (for each cross-sectional in case of a
panel dataset). If no valid values exists for a unit, NA is returned.


==========
Changelog:
==========
1.7 (March 2018)
- re-write of the code leads to speed-up by factor 8
- pre-allocation of some big matrices
- re-write of some loop functions leads to more efficient computations incl.
  vectorization